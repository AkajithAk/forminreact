[{"D:\\CPAAS\\loginpage\\src\\index.js":"1","D:\\CPAAS\\loginpage\\src\\App.js":"2","D:\\CPAAS\\loginpage\\src\\Componance\\index.js":"3"},{"size":272,"mtime":1611549817579,"results":"4","hashOfConfig":"5"},{"size":1443,"mtime":1611313450099,"results":"6","hashOfConfig":"5"},{"size":6609,"mtime":1611314392830,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"e2cx0j",{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"13"},"D:\\CPAAS\\loginpage\\src\\index.js",["17"],"D:\\CPAAS\\loginpage\\src\\App.js",["18"],"import React from 'react';\nimport './App.css';\nimport Ten from './images/ten.png'\nfunction App() {\n\n \n  const onSubmit = async (e) => {\n    e.preventDesfault();\n    const username = e.target.email.value;\n    const name = e.target.name.value;\n    const pass = e.target.pass.value;\n     console.log(\"email :\",username,'\\n',\"name :\",name,'\\n',\"password :\",pass)\n    //const phno = e.target.phno.value;\n    //const select = e.target.select.value;\n  }  \n\n \n  return (<>\n  <nav className=\"nav\">\n    <div className=\"logo\">\n      <img src={Ten} height=\"50px\" />\n    </div>\n    <div className=\"sig\">\n      <h4>Sign Up</h4>\n    </div>\n    \n  </nav>\n  <div  className=\"fullstyle\">\n    <div>\n    <h7 className=\"one full\">Step 1 of 3</h7> \n    <h3 className=\"two full\">Create a password to start <br/> your membership.</h3> \n    <p className=\"three full\">Just a few more steps and you're done! <br/> we hate paperwork, too.</p> \n  <form onSubmit={onSubmit}>\n    <div className=\"pd\">\n        <input type=\"email\" name=\"email\"  placeholder=\"Email\" required className=\"full\"  size=\"30\" /> <br/>\n\n        <input type=\"text\"  name=\"name\" placeholder=\"Mobile number\" required className=\"full\" size=\"30\" /> <br></br>\n\n        <input type=\"password\"  name=\"pass\" placeholder=\"Password\" required className=\"full \" size=\"30\"/> <br></br>\n        <button className=\"btn\" type=\"submit\" >Submit</button>\n </div></form>\n  </div>\n  </div>\n  </>\n  );\n}\n\nexport default App;\n",["19","20"],"D:\\CPAAS\\loginpage\\src\\Componance\\index.js",["21","22"],"import React, { useState, useEffect } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nrequire('./style.css');\r\n\r\nfunction SignIn() {\r\n    const [inputs, setInputs] = useState({\r\n        email: \"\",\r\n        password: \"\",\r\n        confirmpassword: \"\",\r\n    });\r\n\r\n    const [hasText, setHasText] = useState(false);\r\n\r\n    const { handleSubmit, register, errors } = useForm();\r\n\r\n    const onSubmit = values => {\r\n        setInputs({ ...inputs, email: values.email, password: values.password });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"tentkotta-sans-font-loaded\">\r\n                <div className=\"basicLayout simplicity\" lang=\"en-IN\" dir=\"ltr\">\r\n                    <div className=\"simpleContainer\">\r\n                        <div className=\"centerContainer\">\r\n                            <form onSubmit={handleSubmit(onSubmit)}>\r\n                                <div className=\"regFormContainer\">\r\n                                    <div className=\"stepHeader-container\">\r\n                                        <div className=\"stepHeader\">\r\n                                            <h1 className=\"stepTitle\">\r\n                                                Enter your Email to SignIn\r\n                                            </h1>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div>\r\n                                        <ul className=\"simpleForm structural ui-grid\">\r\n                                            <li className=\"tkFormSpace\">\r\n                                                <div className=\"tkInput tkInputOversize\">\r\n                                                    <div className=\"tkInputPlacement\">\r\n                                                        <label className=\"input_id\"\r\n                                                            placeholder=\"email\">\r\n                                                            <input type=\"email\"\r\n                                                                name=\"email\" className={`tkTextField ${hasText ? 'hasText' : ''}`} id=\"id_email\"\r\n                                                                maxLength=\"50\" minLength=\"5\"\r\n                                                                ref={register({\r\n                                                                    required: \"E-mail ID is Required\",\r\n                                                                    pattern: {\r\n                                                                        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n                                                                        message: \"invalid email address\",\r\n                                                                    }\r\n                                                                })} />\r\n                                                            {errors.email &&\r\n                                                                <p style={{ color: 'red', fontSize: '10px' }}>{errors.email.message}</p>\r\n                                                            }\r\n                                                            <label\r\n                                                                htmlFor=\"id_email\" className=\"placeLabel\">\r\n                                                                Email\r\n                                                            </label>\r\n                                                        </label>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </li>\r\n\r\n                                            <li className=\"tkFormSpace\">\r\n                                                <div className=\"tkInput tkInputOversize\">\r\n                                                    <div className=\"tkInputPlacement\">\r\n                                                        <label className=\"input_id\"\r\n                                                            placeholder=\"password\">\r\n                                                            <input type=\"password\"\r\n                                                                name=\"password\"\r\n                                                                className=\"tkTextField\" id=\"id_password\"\r\n                                                                autoComplete=\"password\" maxLength=\"61\" minLength=\"4\"\r\n                                                                dir=\"\"\r\n                                                                ref={register({\r\n                                                                    required: \" password is not filled\",\r\n                                                                    validate: value => value.length\r\n                                                                })} />\r\n                                                            <label htmlFor=\"id_password\" className=\"placeLabel\">\r\n                                                                Add a\r\n                                                                password\r\n                                                            </label>\r\n                                                            {\r\n                                                                errors.password && <p style={{ color: 'red', fontSize: '10px' }}>\r\n                                                                    {errors.password.message}\r\n                                                                </p>\r\n                                                            }\r\n                                                        </label>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </li>\r\n                                        </ul>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"submitBtnContainer\"><button type=\"submit\" autoComplete=\"off\"\r\n                                    className=\"tk-btn tk-btn-primary tk-btn-solid tk-btn-oversize\"\r\n                                    placeholder=\"regForm_button_continue\">CONTINUE</button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignIn;",{"ruleId":"23","severity":1,"message":"24","line":5,"column":8,"nodeType":"25","messageId":"26","endLine":5,"endColumn":14},{"ruleId":"27","severity":1,"message":"28","line":21,"column":7,"nodeType":"29","endLine":21,"endColumn":38},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"23","severity":1,"message":"34","line":1,"column":27,"nodeType":"25","messageId":"26","endLine":1,"endColumn":36},{"ruleId":"23","severity":1,"message":"35","line":13,"column":21,"nodeType":"25","messageId":"26","endLine":13,"endColumn":31},"no-unused-vars","'SignIn' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["36"],"no-negated-in-lhs",["37"],"'useEffect' is defined but never used.","'setHasText' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]